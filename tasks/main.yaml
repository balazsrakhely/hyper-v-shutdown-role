---
- name: Validations
  ansible.builtin.include_tasks:
    file: validate.yaml

- name: Powershell version
  ansible.windows.win_powershell:
    script: |
      $PSVersionTable.PSVersion
  register: _ps_version
  delegate_to: "{{ hv_host }}"

- debug: var=_ps_version.output

- name: Find VMs to modify the state of
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $VMMServer,
          [String]
          $VMTag
      )

      Get-SCVirtualMachine -VMMServer $VMMServer | Where-Object { $_.Tag -Eq $VMTag } | Select-Object -Property Name, Tag
    parameters:
      VMMServer: "{{ vmm_server }}"
      VMTag: "{{ vm_tag }}"
  register: _vm_result
  delegate_to: "{{ hv_host }}"

- debug: var=_vm_result.output

- name: Modify state of VM
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $VMMServer,
          [String]
          $VMName
          [String]
          $VMState
      )

      $output = @{
          obj = $null
          err = ""
      }

      try {
        $VMObj = Get-SCVirtualMachine -VMMServer $VMMServer -Name $VMName -ErrorAction Stop

        $resultObject = switch ($VMState) {
          "on"      { $VMObj | Start-SCVirtualMachine -ErrorAction Stop }
          "off"     { $VMObj | Stop-SCVirtualMachine -Shutdown -ErrorAction Stop }
          "restart" { $VMObj | Reset-SCVirtualMachine -ErrorAction Stop }
        }

        $output.obj = $resultObject | Select-Object -Property Name, Status
      }
      catch {
        $output.err = $_.Exception.Message
        $output.obj = $VMObj | Select-Object -Property Name, Status
      }
    parameters:
      VMMServer: "{{ vmm_server }}"
      VMName: "{{ _vm_obj_item.Name }}"
      VMState: "{{ vm_state }}"
  loop: "{{ _vm_result.output }}"
  loop_control:
    loop_var: _vm_obj_item
  register: _state_change_result
  delegate_to: "{{ hv_host }}"

- debug: var=_state_change_result.output
